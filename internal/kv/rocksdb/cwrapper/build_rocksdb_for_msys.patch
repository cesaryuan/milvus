diff -ru a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2021-12-09 11:03:21 +0000
+++ b/CMakeLists.txt	2021-12-09 14:07:04 +0000
@@ -55,12 +55,6 @@
     "Default BUILD_TYPE is ${default_build_type}" FORCE)
 endif()
 
-find_program(CCACHE_FOUND ccache)
-if(CCACHE_FOUND)
-  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
-  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
-endif(CCACHE_FOUND)
-
 option(WITH_JEMALLOC "build with JeMalloc" OFF)
 option(WITH_SNAPPY "build with SNAPPY" OFF)
 option(WITH_LZ4 "build with lz4" OFF)
@@ -176,7 +170,7 @@
 find_package(Git)
 
 if(GIT_FOUND AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/.git")
-  if(WIN32)
+  if(MSVC)
     execute_process(COMMAND $ENV{COMSPEC} /C ${GIT_EXECUTABLE} -C ${CMAKE_CURRENT_SOURCE_DIR} rev-parse HEAD OUTPUT_VARIABLE GIT_SHA)
   else()
     execute_process(COMMAND ${GIT_EXECUTABLE} -C ${CMAKE_CURRENT_SOURCE_DIR} rev-parse HEAD OUTPUT_VARIABLE GIT_SHA)
@@ -209,7 +203,7 @@
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wextra -Wall")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wsign-compare -Wshadow -Wno-unused-parameter -Wno-unused-variable -Woverloaded-virtual -Wnon-virtual-dtor -Wno-missing-field-initializers -Wno-strict-aliasing")
   if(MINGW)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format -fno-asynchronous-unwind-tables")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-format")
     add_definitions(-D_POSIX_C_SOURCE=1)
   endif()
   if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
@@ -901,7 +895,11 @@
 endif()
 
 if(WIN32)
-  set(SYSTEM_LIBS ${SYSTEM_LIBS} shlwapi.lib rpcrt4.lib)
+  if(MSVC)
+    set(SYSTEM_LIBS ${SYSTEM_LIBS} shlwapi.lib rpcrt4.lib)
+  else()
+    set(SYSTEM_LIBS ${SYSTEM_LIBS} shlwapi rpcrt4)
+  endif()
 else()
   set(SYSTEM_LIBS ${CMAKE_THREAD_LIBS_INIT})
 endif()
diff -ru a/port/win/env_win.cc b/port/win/env_win.cc
--- a/port/win/env_win.cc	2021-12-09 11:03:15 +0000
+++ b/port/win/env_win.cc	2021-12-09 14:09:17 +0000
@@ -10,7 +10,6 @@
 #if defined(OS_WIN)
 
 #include "port/win/env_win.h"
-#include "port/win/win_thread.h"
 #include <algorithm>
 #include <ctime>
 #include <thread>
@@ -98,9 +97,16 @@
 
   HMODULE module = GetModuleHandle("kernel32.dll");
   if (module != NULL) {
+#if defined(__MINGW32__)
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wcast-function-type"
+#endif
     GetSystemTimePreciseAsFileTime_ =
       (FnGetSystemTimePreciseAsFileTime)GetProcAddress(
           module, "GetSystemTimePreciseAsFileTime");
+#if defined(__MINGW32__)
+#pragma GCC diagnostic pop
+#endif
   }
 }
 
@@ -1252,7 +1258,7 @@
   state->user_function = function;
   state->arg = arg;
   try {
-    ROCKSDB_NAMESPACE::port::WindowsThread th(&StartThreadWrapper, state.get());
+    ROCKSDB_NAMESPACE::port::Thread th(&StartThreadWrapper, state.get());
     state.release();
 
     std::lock_guard<std::mutex> lg(mu_);
Ö»ÔÚ b/port/win ´æÔÚ£ºenv_win.cc.orig
diff -ru a/port/win/env_win.h b/port/win/env_win.h
--- a/port/win/env_win.h	2021-12-09 11:03:15 +0000
+++ b/port/win/env_win.h	2021-12-09 14:09:17 +0000
@@ -16,12 +16,13 @@
 
 #pragma once
 
-#include "port/win/win_thread.h"
+#include "port/win/port_win.h"
 #include <rocksdb/env.h>
 #include "util/threadpool_imp.h"
 
 #include <stdint.h>
 #include <windows.h>
+#include <winioctl.h>
 
 #include <mutex>
 #include <vector>
@@ -74,7 +75,7 @@
   Env* hosted_env_;
   mutable std::mutex mu_;
   std::vector<ThreadPoolImpl> thread_pools_;
-  std::vector<WindowsThread> threads_to_join_;
+  std::vector<Thread> threads_to_join_;
 
 };
 
